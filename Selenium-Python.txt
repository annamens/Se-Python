Selenium Python
Install Python from python wedbsite
Install Pycharm IDE from jet-brains

Step-1: Create a new project in the Pycharm
Install the following packages:
1.Selenium : Selenium Libraries
2.Pytest: Python UnitTest framework
3.Pytest-html: Pytest HTML reports
4.Pytest-xdist: Run tests parallel
5.OPenpyxl: MS Excel support
6.Allure-Pytest : to generate allure reports

Step:2 Create folder structure
Project Name	
	|
	pageObjects(Package)
	|
	testCases(Package)
	|
	utilities(Package)
	|
	TestData(Folder)
	|
	Configurations(Folder)
	|
	Logs(Folder)
	|
	Screenshots(Folder)
	|
	Reports(Folder)
	|
	Run.bat


Run tests
pytest -v -s testname --browser chrome

Step-3: Automating Login test case
-create LoginPage object class under "pageObjects"
create Login test under "testcases"
create confTest.py under "testCases"

Step-4:Capture screenshot on failures
-update login test with screenshot under "testcases"

Step-5: Read common values from ini file
- Add "config.ini" file in "Configurations" folder
- create "readProperties.py" utility file under utilities package to read common data

step-6:Adding logs to test case
-Add customLogger.py under utilities package
-Add logs to Login test case

Step-7: Run tests on desired browser/crossbrowser/parallel
- update confTest.py with required fixtues which will accept command line arguments
-Pass browser name as argumetn in command line

To run tests on desired browser
pytest -s -v testname --browser chrome

TO run tests parallel
pytest -s -v -n=3 testname --browser chrome

step-8 Generate pytest HTML reports
update confTest with pytest hooks
To generate HTML report run below command

pytest -s -v -n=3 --html=Reports\report.html testname --browser chrome

step-9 Automating Data Driven Test Case
-Prepare test data in Excel sheet, place the test data in testData folder
Create "ExcelUtils.py" utility

Step-10 Adding new testCases
step-11 Groups
add marker in pytest.ini in testCases folder
add user defined @pytest.mark.regression for every method

pytest  -s -v -m "regression" --html=reports\report.html testCases/ --browser chrome

Allure report
pytest --alluredir=AllureReport testname
open allure report
allure serve AllureReport

#commands
pytest -v -s testname --browser chrome
pytest -s -v -n=3 testname --browser chrome
pytest -s -v -n=3 --html=Reports\report.html testname --browser chrome
pytest  -s -v -m "regression" --html=reports\report.html testCases/ --browser chrome





Of course! Here are some detailed notes with additional information for each topic:

1. **Built-in Functions**:
   - These functions are readily available in Python and don't require importing any modules.
   - `print()`: Outputs the given object(s) to the standard output.
   - `len()`: Returns the length (number of items) of an object.
   - `range()`: Generates a sequence of numbers within a specified range.
   - `zip()`: Combines multiple iterables into tuples.
   - `map()`: Applies a function to each item in an iterable and returns a map object.
   - `filter()`: Filters elements from an iterable based on a function.
   - `sorted()`: Returns a sorted list of the specified iterable.
   - `max()`, `min()`: Returns the maximum or minimum value from an iterable.
   - `sum()`: Returns the sum of all elements in an iterable.
   - `enumerate()`: Returns an enumerate object, consisting of pairs of index and value.
   - `open()`: Opens a file and returns a file object.

2. **Data Structures and Methods**:
   - Lists, tuples, dictionaries, sets, and strings are fundamental data structures in Python.
   - Each data structure has specific methods and operations for manipulation.
   - Methods for lists: `append()`, `extend()`, `pop()`, `insert()`, etc.
   - Methods for dictionaries: `keys()`, `values()`, `items()`, `get()`, etc.
   - Methods for sets: `add()`, `remove()`, `discard()`, `union()`, `intersection()`, etc.
   - String methods: `split()`, `join()`, `strip()`, `replace()`, `find()`, `startswith()`, `endswith()`, etc.

3. **Iterators and Generators**:
   - Iterators are objects that implement the iterator protocol, providing the `__iter__()` and `__next__()` methods.
   - Generators are a concise way to create iterators using functions with the `yield` keyword.
   - Generators allow lazy evaluation, which can save memory and improve performance.

4. **Decorators**:
   - Decorators are functions that modify the behavior of other functions or methods.
   - They are denoted by the `@decorator_name` syntax.
   - Common built-in decorators include `@staticmethod` and `@classmethod`.
   - Decorators can be used for logging, authentication, memoization, etc.
   - Decorators can also be nested, allowing for multiple layers of modification.

5. **Lambda Functions**:
   - Lambda functions are small, anonymous functions defined using the `lambda` keyword.
   - They can take any number of arguments but can only have one expression.
   - Lambda functions are often used as arguments for higher-order functions like `map()`, `filter()`, and `sorted()`.

6. **Exception Handling**:
   - Exception handling allows for graceful handling of errors and exceptions in Python programs.
   - The `try`, `except`, `else`, and `finally` keywords are used for exception handling.
   - Exceptions can be raised explicitly using the `raise` keyword.
   - Python's built-in exceptions include `ValueError`, `TypeError`, `IOError`, `KeyError`, etc.

7. **File Handling**:
   - File handling in Python involves opening files using the `open()` function, reading from them, writing to them, and closing them.
   - Common file modes include `'r'` for reading, `'w'` for writing, and `'a'` for appending.
   - It's important to handle files properly, especially when it comes to closing them to release system resources.

8. **Modules and Packages**:
   - Modules are Python files containing Python code.
   - Packages are directories containing multiple modules and an `__init__.py` file.
   - Modules can be imported using the `import` statement.
   - Different import styles include `import module`, `from module import name`, and `import module as alias`.

9. **Object-Oriented Programming (OOP)**:
   - OOP is a programming paradigm based on the concept of "objects," which can contain data and code.
   - Classes are blueprints for creating objects, defining their attributes and methods.
   - Inheritance allows a class to inherit attributes and methods from another class.
   - Polymorphism allows objects of different classes to be treated as objects of a common superclass.
   - Encapsulation hides the internal state of an object and only exposes necessary functionality through methods.

10. **Regular Expressions (re module)**:
    - Regular expressions are sequences of characters that define a search pattern.
    - The `re` module provides functions for working with regular expressions in Python.
    - Common functions include `re.search()`, `re.match()`, `re.findall()`, `re.sub()`, etc.
    - Regular expressions are powerful tools for pattern matching and text manipulation.

These notes provide a solid foundation for understanding essential Python functions and concepts, which are crucial for interviews and real-world programming tasks.





